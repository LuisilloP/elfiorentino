---
import type { GetStaticPaths } from "astro";
import type { Product } from "../../types/Interfaces.ts";

import Layout from "../../layouts/Layout.astro";
import { dataProducts } from "../../services/getProducts";
import ArrowImage from "../../components/button/ArrowImage.astro";
import LabelCustomize from "../../components/button/LabelCustomize.astro";

const { id } = Astro.params;

const product: Product | undefined = dataProducts.find(
  (p) => p.id.toString() == id
) as Product | undefined;

if (!product) {
  throw new Error(`Producto no encontrado: ${id}`);
}

export const getStaticPaths = (() => {
  return dataProducts.map((product) => ({
    params: { id: product.id.toString() }, // Asegúrate de que el ID esté en formato de cadena
  }));
}) satisfies GetStaticPaths;

const { description, price, photos, name, tones } = product;

// src={`/productphotos/${id}/${img}`}
---

<Layout title={name}>
  <section
    class="pt-40 md:pt-60 px-5 grid lg:grid-cols-2 lg:w-[1200px] min-h-[800px] m-auto gap-9 font-barlow"
  >
    <div
      class="relative overflow-hidden md:w-[30rem] max-h-[27rem] min-h-[27rem]"
    >
      <div
        id="slider"
        class="flex transition-transform duration-300 ease-in-out max-h-[27rem] min-h-[27rem]
      ."
      >
        {
          photos?.urls.map((img: string) => (
            <img
              src={`/productImage/${img}`}
              alt={`image-${name}`}
              class="w-full h-auto rounded object-cover lg:w-[30rem]"
            />
          ))
        }
      </div>
      <ArrowImage direction="left" />
      <ArrowImage direction="right" />
    </div>
    <div>
      <h1 class="text-2xl font-nerko mb-5 pt-3 text-[#282829]">
        {product.name}
      </h1>
      <p class="text-lg font-nerko text-[#505050] mt-5">{description}</p>

      <p class="text-lg font-nerko mt-3">
        Desde ${price.toLocaleString("es-ES")}
      </p>
      <div class="grid grid-cols-2 md:grid-cols-3 gap-5">
        <LabelCustomize type="number" name="Alto" />
        <LabelCustomize type="number" name='Largo"' />
        <LabelCustomize type="number" name="Ancho" />
        <LabelCustomize type="number" name="Cajones" />
        <select
          class="py-3 px-4 pe-9 block w-full border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
        >
          <option selected="">Tono melamina</option>
          {tones?.colors.map((color: string) => <option>{color}</option>)}
        </select>
      </div>
      <a
        id="whatsAppBtn"
        class="flex w-[100%] bg-[#25d366] rounded font-nerko text-white justify-center items-center mt-5"
        href={`https://wa.me/998973623?text=Hola, me interesa el producto ${product.name.replace(/[^\p{L}\p{N}\s]/gu, "")}. ¿Podrías darme más información?`}
        target="_blank"
      >
        <img class="w-10 h-10" src="/socialmedia/whatsappButton.svg" />
        Cotizar mi producto
      </a>
    </div>
  </section>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      //Slider Imagen
      const slider = document.getElementById("slider")!;
      const prevButton = document.getElementById("prev");
      const nextButton = document.getElementById("next");

      //Contacto WhatsApp
      const whatsappButton = document.getElementById("whatsAppBtn");
      const inputs = document.querySelectorAll("input");
      const select = document.querySelector("select");

      if (slider && prevButton && nextButton) {
        let index = 0;
        const totalImages = slider.children.length;

        // Actualiza posicion de slider
        function updateSlider() {
          const offset = -index * 100;
          slider.style.transform = `translateX(${offset}%)`;
        }
        // Click de eventos
        prevButton.addEventListener("click", () => {
          index = index > 0 ? index - 1 : totalImages - 1;
          updateSlider();
        });

        nextButton.addEventListener("click", () => {
          index = index < totalImages - 1 ? index + 1 : 0;
          updateSlider();
        });

        // Swpiper para moviles
        let touchStartX = 0;
        let touchEndX = 0;

        slider.addEventListener("touchstart", (e) => {
          touchStartX = e.changedTouches[0].screenX;
        });

        slider.addEventListener("touchend", (e) => {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipeGesture();
        });

        function handleSwipeGesture() {
          const swipeThreshold = 50;
          if (touchEndX < touchStartX - swipeThreshold) {
            index = index < totalImages - 1 ? index + 1 : 0;
            updateSlider();
          }

          if (touchEndX > touchStartX + swipeThreshold) {
            index = index > 0 ? index - 1 : totalImages - 1;
            updateSlider();
          }
        }
      }
      whatsappButton?.addEventListener("click", (event) => {
        let allFieldsFilled = true;

        // Validar inputs
        inputs.forEach((input) => {
          if (!input.value.trim()) {
            allFieldsFilled = false;
            input.classList.add("border-red-500"); // Resaltar en rojo si está vacío
          } else {
            input.classList.remove("border-red-500");
          }
        });

        // Validar el select
        if (!select?.value || select.value === "Tono melamina") {
          allFieldsFilled = false;
          select?.classList.add("border-red-500");
        } else {
          select.classList.remove("border-red-500");
        }

        // Prevenir navegación si hay campos vacíos
        if (!allFieldsFilled) {
          event.preventDefault();
          alert(
            "Por favor, rellena todos los campos antes de cotizar el producto."
          );
        }
      });
    });
  </script>
</Layout>
